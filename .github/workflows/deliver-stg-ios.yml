name: deliver stg ios

on:
  workflow_dispatch:
    inputs:
      automatically-signing:
        description: 'Use Automatically manage signing'
        type: boolean
        default: true
      upload-artifact:
        description: 'Upload artifact'
        type: boolean
        default: true
  workflow_call:
    inputs:
      automatically-signing:
        description: 'Use Automatically manage signing'
        type: boolean
        default: true
      upload-artifact:
        description: 'Upload artifact'
        type: boolean
        default: true

permissions:
  contents: read

jobs:
  build:
    runs-on: macos-12
    timeout-minutes: 60
    outputs:
      ipa-filename: ${{ steps.ipa.outputs.ipa-filename }}
    env:
      PREPROCESS_SCRIPT_BASE64: ${{ secrets.PREPROCESS_SCRIPT_BASE64 }}
      APPLE_API_ISSUER_ID: ${{ secrets.APPLE_API_ISSUER_ID }}
      APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
      APPLE_API_AUTHKEY_P8_BASE64: ${{ secrets.APPLE_API_AUTHKEY_P8_BASE64 }}
      APPLE_KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
      APPLE_DEVELOPMENT_CERTIFICATE_P12_BASE64: ${{ secrets.APPLE_DEVELOPMENT_CERTIFICATE_P12_BASE64 }}
      APPLE_DEVELOPMENT_CERTIFICATE_P12_PASSWORD: ${{ secrets.APPLE_DEVELOPMENT_CERTIFICATE_P12_PASSWORD }}
      APPLE_DISTRIBUTION_CERTIFICATE_P12_BASE64: ${{ secrets.APPLE_DISTRIBUTION_CERTIFICATE_P12_BASE64 }}
      APPLE_DISTRIBUTION_CERTIFICATE_P12_PASSWORD: ${{ secrets.APPLE_DISTRIBUTION_CERTIFICATE_P12_PASSWORD }}
      APPLE_PROVISIONING_PROFILE_BASE64: ${{ secrets.APPLE_PROVISIONING_PROFILE_BASE64 }}
    steps:
      - uses: actions/checkout@v3

      - name: Run pre-process script
        shell: bash
        run: |
          if [ -n "$PREPROCESS_SCRIPT_BASE64" ]; then
            echo $PREPROCESS_SCRIPT_BASE64 | base64 --decode > ./pre-process.sh && bash ./pre-process.sh
          fi

      - name: Import Apple Development Certificate
        if: inputs.automatically-signing
        run: |
          DEVELOPMENT_CERTIFICATE_PATH=$RUNNER_TEMP/development_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate from secrets
          echo -n "$APPLE_DEVELOPMENT_CERTIFICATE_P12_BASE64" | base64 --decode > $DEVELOPMENT_CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$APPLE_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$APPLE_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $DEVELOPMENT_CERTIFICATE_PATH -P "$APPLE_DEVELOPMENT_CERTIFICATE_P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Extract App Store Connect API Private Key in ./private_keys
        if: inputs.automatically-signing
        run: |
          mkdir ./private_keys
          echo -n "$APPLE_API_AUTHKEY_P8_BASE64" | base64 --decode > ./private_keys/AuthKey_$APPLE_API_KEY_ID.p8

      - name: Import Provisioning Profile
        if: inputs.automatically-signing == false
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo -n "$APPLE_PROVISIONING_PROFILE_BASE64" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/distribution.mobileprovision

      - name: Import Apple Distribution Certificate
        if: inputs.automatically-signing == false
        run: |
          DISTRIBUTION_CERTIFICATE_PATH=$RUNNER_TEMP/distribution_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate from secrets
          echo -n "$APPLE_DISTRIBUTION_CERTIFICATE_P12_BASE64" | base64 --decode > $DISTRIBUTION_CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$APPLE_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$APPLE_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $DISTRIBUTION_CERTIFICATE_PATH -P "$APPLE_DISTRIBUTION_CERTIFICATE_P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - run: flutter --version

      - run: flutter pub get

      - name: Build(automatically signing)
        if: inputs.automatically-signing
        run: |
          flutter build ios --release --no-codesign --dart-define=FLAVOR=stg
          xcodebuild archive -workspace ./ios/Runner.xcworkspace -scheme Runner -configuration Release -archivePath ./build/ios/Runner.xcarchive -allowProvisioningUpdates -authenticationKeyIssuerID $APPLE_API_ISSUER_ID -authenticationKeyID $APPLE_API_KEY_ID -authenticationKeyPath `pwd`/private_keys/AuthKey_$APPLE_API_KEY_ID.p8
          cat << EOS > ./ios/ExportOptions.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>compileBitcode</key>
            <false/>
            <key>method</key>
            <string>ad-hoc</string>
          </dict>
          </plist>
          EOS
          xcodebuild -exportArchive -archivePath ./build/ios/Runner.xcarchive -exportPath ./build/ios/ipa -exportOptionsPlist ./ios/ExportOptions.plist -allowProvisioningUpdates -authenticationKeyIssuerID $APPLE_API_ISSUER_ID -authenticationKeyID $APPLE_API_KEY_ID -authenticationKeyPath `pwd`/private_keys/AuthKey_$APPLE_API_KEY_ID.p8

      - name: Build(manually signing)
        if: inputs.automatically-signing == false
        run: flutter build ipa --export-options-plist=./ios/ExportOptions.plist --dart-define=FLAVOR=stg

      - name: Detect ipa filename and path
        id: ipa
        run: |
          echo "ipa-path=$(find build/ios/ipa -type f -name '*.ipa')" >> $GITHUB_OUTPUT
          echo "ipa-filename=$(basename $(find build/ios/ipa -type f -name '*.ipa'))" >> $GITHUB_OUTPUT

      - name: Upload ipa to artifact
        if: ${{ inputs.upload-artifact }}
        uses: actions/upload-artifact@v3
        with:
          name: ipa
          path: ${{ steps.ipa.outputs.ipa-path }}

  upload:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ inputs.upload-artifact }}
    timeout-minutes: 30
    env:
      FIREBASE_SERVICE_ACCOUNT_KEY_JSON_BASE64: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY_JSON_BASE64 }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: ipa

      - name: Extract Google Service Account file
        run: |
          echo -n "$FIREBASE_SERVICE_ACCOUNT_KEY_JSON_BASE64" | base64 --decode > ./firebase_service_account.json

      - name: Upload artifact to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@0d0bad2ef0f6c55afb1fbf95260538844cd33c77
        with:
          appId: ${{ secrets.FIREBASE_APP_ID_IOS }}
          serviceCredentialsFile: ./firebase_service_account.json
          testers: yorifuji@gmail.com
          file: '${{ needs.build.outputs.ipa-filename }}'
