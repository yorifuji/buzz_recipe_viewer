name: deliver android

on:
  workflow_dispatch:
    inputs:
      upload-artifact:
        description: 'Upload artifact'
        type: boolean
        default: true
  workflow_call:
    inputs:
      upload-artifact:
        description: 'Upload artifact'
        type: boolean
        default: true

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      app-filename: ${{ steps.info.outputs.app-filename }}
      release-name: ${{ steps.info.outputs.release-name }}
      package-name: ${{ steps.info.outputs.package-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Run pre-process script
        shell: bash
        env:
          PREPROCESS_SCRIPT_BASE64: ${{ secrets.PREPROCESS_SCRIPT_BASE64 }}
        run: |
          if [ -n "$PREPROCESS_SCRIPT_BASE64" ]; then
            echo $PREPROCESS_SCRIPT_BASE64 | base64 --decode > ./pre-process.sh && bash ./pre-process.sh
          fi

      - name: Extract keystore file
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          echo $ANDROID_KEYSTORE_BASE64 | base64 --decode > android/app/release.jks

      - name: Extract key.properties file
        env:
          ANDROID_KEY_PROPERTIES_BASE64: ${{ secrets.ANDROID_KEY_PROPERTIES_BASE64 }}
        run: |
          echo $ANDROID_KEY_PROPERTIES_BASE64 | base64 --decode > android/key.properties

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - name: Run flutter version
        run: flutter --version

      - name: Run flutter pub get
        run: flutter pub get

      - name: Build app bundle
        run: |
          flutter build appbundle --dart-define=FLAVOR=prod

      - name: Get Job Output info
        id: info
        run: |
          echo "release-name=$(flutter pub run cider version | sed -E 's/([0-9.]+)\+([0-9]+)/\2(\1)/g')" >> $GITHUB_OUTPUT
          echo "package-name=$(sed -nE 's/.*package="(.*)".*/\1/p' android/app/src/main/AndroidManifest.xml)" >> $GITHUB_OUTPUT
          echo "app-filename=app-release.aab" >> $GITHUB_OUTPUT

      - name: Upload aab to artifact
        if: ${{ inputs.upload-artifact }}
        uses: actions/upload-artifact@v3
        with:
          name: aab
          path: build/app/outputs/bundle/release/app-release.aab

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f ./pre-process.sh
          rm -f ./android/upload.jks
          rm -f ./android/key.properties

  upload:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ inputs.upload-artifact }}
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: aab

      - name: Extract google service account file
        env:
          GOOGLE_SERVICE_ACCOUNT_KEY_JSON_BASE64: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY_JSON_BASE64 }}
        run: |
          echo $GOOGLE_SERVICE_ACCOUNT_KEY_JSON_BASE64 | base64 --decode > android/service-account.json

      - name: Upload to Google Play
        uses: r0adkll/upload-google-play@78c9e796b1035c94169c101d8e46cb880194bfc3
        with:
          serviceAccountJson: android/service-account.json
          releaseFiles: ${{ needs.build.outputs.app-filename }}
          packageName: ${{ needs.build.outputs.package-name }}
          releaseName: ${{ needs.build.outputs.release-name }}
          track: production
          status: completed

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f ./android/service-account.json
