name: Dispatch slash command

run-name: Dispatch slash command ${{ (vars.RUNS_ON_SELF_HOSTED == null && '(on GitHub-hosted)') || '(on self-hosted)' }}

on:
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      command:
        description: 'Command to dispatch (without slash)'
        required: true
        default: 'deploy'

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  pre-process:
    runs-on: ubuntu-24.04
    if: ${{
      (
        github.event.issue.pull_request &&
        contains(fromJson('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.comment.author_association) &&
        startsWith(github.event.comment.body, '/')
      ) ||
      (
        github.event_name == 'workflow_dispatch'
      )
      }}
    timeout-minutes: 30
    outputs:
      command: ${{ steps.set-command.outputs.command }}
    steps:
      - id: set-command
        name: "Set command output"
        env:
          PR_COMMENT: ${{ github.event.comment.body }}
          WORKFLOW_COMMAND: ${{ github.event.inputs.command }}
          IS_PR: ${{ github.event.issue.pull_request != null }}
          EVENT_NAME: ${{ github.event_name }}
        run: |
          if [[ "$IS_PR" == "true" ]]; then
            # For PR comments, remove the leading slash
            COMMAND=${PR_COMMENT#/}
            echo "command=$COMMAND" >> $GITHUB_OUTPUT
          else
            # For workflow_dispatch, use the command as is (without slash)
            echo "command=$WORKFLOW_COMMAND" >> $GITHUB_OUTPUT
          fi

  dispatcher:
    needs: pre-process
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    outputs:
      command: ${{ steps.parser.outputs.command }}
      branch: ${{ steps.parser.outputs.branch }}
    steps:
      - id: parser
        name: "Parse slash command"
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        env:
          COMMAND_TEXT: ${{ needs.pre-process.outputs.command }}
          IS_PR: ${{ github.event.issue.pull_request != null }}
          EVENT_NAME: ${{ github.event_name }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          CURRENT_BRANCH: ${{ github.ref_name }}
          COMMENT_ID: ${{ github.event.comment.id }}
        with:
          script: |
            // List of supported slash commands
            const supportedCommands = ['deploy'].sort((a, b) => b.length - a.length);

            // Get command text from pre-process job
            const commandText = process.env.COMMAND_TEXT || '';
            
            // Detect command from command text (without slash)
            const command = supportedCommands.find(cmd =>
              commandText.startsWith(cmd)
            );
            
            if (!command && commandText) {
              core.setFailed(`Unsupported command: ${commandText}. Supported commands: ${supportedCommands.join(', ')}`);
              return;
            }
            
            core.setOutput('command', command || '')

            // Add reaction to comment if this is from a PR comment and command is valid
            if (process.env.IS_PR === 'true' && command && process.env.COMMENT_ID) {
              try {
                console.log(`Attempting to add reaction to comment ID: ${process.env.COMMENT_ID}`);
                
                // Log available context information for debugging
                console.log(`Repository: ${context.repo.owner}/${context.repo.repo}`);
                console.log(`Event type: ${context.eventName}`);
                console.log(`Actor: ${context.actor}`);
                
                const response = await github.rest.reactions.createForIssueComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: parseInt(process.env.COMMENT_ID),
                  content: 'eyes'
                });
                
                console.log(`Added eyes reaction to comment. Response status: ${response.status}`);
              } catch (error) {
                console.log(`Error adding reaction: ${error.message}`);
                console.log(`Error details: ${JSON.stringify(error)}`);
                // Continue execution even if reaction fails
              }
            }

            // Only get PR info if this is from a pull request comment
            if (process.env.IS_PR === 'true') {
              try {
                // Get PR info and extract branch name
                const { data: pullRequest } = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: parseInt(process.env.ISSUE_NUMBER || '0')
                });
                if (!pullRequest.head.ref) {
                  core.setFailed('Failed to get branch name from pull request');
                  return;
                }
                core.setOutput('branch', pullRequest.head.ref);
              } catch (error) {
                core.setFailed(`Error getting PR info: ${error.message}`);
              }
            } else if (process.env.EVENT_NAME === 'workflow_dispatch') {
              // For workflow_dispatch, use the current branch where the workflow is running
              core.setOutput('branch', process.env.CURRENT_BRANCH);
            } else {
              core.setOutput('branch', process.env.CURRENT_BRANCH || 'main');
            }

  deploy:
    needs: dispatcher
    if: ${{ needs.dispatcher.outputs.command == 'deploy' }}
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: "Generate App Store Connect JWT Token"
        id: asc
        uses: yuki0n0/action-appstoreconnect-token@v1.0
        with:
          issuer id: ${{ secrets.APPLE_API_ISSUER_ID }}
          key id: ${{ secrets.APPLE_API_KEY_ID }}
          key: ${{ secrets.APPLE_API_AUTHKEY_P8 }}

      - name: "Dispatch Xcode Cloud Workflow"
        uses: yorifuji/actions-xcode-cloud-dispatcher@dcf4ab200b9fb89a20c903bae840f2e2ce96422d # v1.0.3
        with:
          appstore-connect-token: ${{ steps.asc.outputs.token }}
          xcode-cloud-workflow-id: ${{ vars.XCODE_CLOUD_WORKFLOW_ID }}
          git-branch-name: ${{ needs.dispatcher.outputs.branch }}
