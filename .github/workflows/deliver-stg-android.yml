name: deliver stg android

on:
  workflow_dispatch:
    inputs:
      upload-artifact:
        description: 'Upload artifact'
        type: boolean
        default: true
  workflow_call:
    inputs:
      upload-artifact:
        description: 'Upload artifact'
        type: boolean
        default: true

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      release-name: ${{ steps.info.outputs.release-name }}
      package-name: ${{ steps.info.outputs.package-name }}
    steps:
      - uses: actions/checkout@v3

      - name: Run pre-process script
        shell: bash
        env:
          PREPROCESS_SCRIPT_BASE64: ${{ secrets.PREPROCESS_SCRIPT_BASE64 }}
        run: |
          if [ -n "$PREPROCESS_SCRIPT_BASE64" ]; then
            echo $PREPROCESS_SCRIPT_BASE64 | base64 --decode > ./pre-process.sh && bash ./pre-process.sh
          fi

      - name: Extract keystore file
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          echo $ANDROID_KEYSTORE_BASE64 | base64 --decode > android/app/release.jks

      - name: Extract key.properties file
        env:
          ANDROID_KEY_PROPERTIES_BASE64: ${{ secrets.ANDROID_KEY_PROPERTIES_BASE64 }}
        run: |
          echo $ANDROID_KEY_PROPERTIES_BASE64 | base64 --decode > android/key.properties
          echo storeFile=`pwd`/android/app/release.jks >> android/key.properties

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - run: flutter --version

      - run: flutter pub get

      - name: Build app bundle
        run: |
          flutter build apk --dart-define=FLAVOR=stg

      - name: Get Job Output info
        id: info
        run: |
          echo "release-name=$(flutter pub run cider version | sed -E 's/([0-9.]+)\+([0-9]+)/\2(\1)/g')" >> $GITHUB_OUTPUT
          echo "package-name=$(sed -nE 's/.*package="(.*)".*/\1/p' android/app/src/main/AndroidManifest.xml)" >> $GITHUB_OUTPUT

      - name: Upload apk to artifact
        if: ${{ inputs.upload-artifact }}
        uses: actions/upload-artifact@v3
        with:
          name: apk
          path: build/app/outputs/flutter-apk/app-release.apk

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f ./pre-process.sh
          rm -f ./android/app/release.jks
          rm -f ./android/key.properties

  upload:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ inputs.upload-artifact }}
    timeout-minutes: 30
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: apk

      - name: Extract Firebase Service Account file
        env:
          FIREBASE_SERVICE_ACCOUNT_KEY_JSON_BASE64: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY_JSON_BASE64 }}
        run: |
          echo -n "$FIREBASE_SERVICE_ACCOUNT_KEY_JSON_BASE64" | base64 --decode > ./firebase_service_account.json

      - name: Upload to Firebase App Distribution
        env:
          FIREBASE_APP_ID_ANDROID: ${{ secrets.FIREBASE_APP_ID_ANDROID }}
        run: |
          curl -sL https://firebase.tools | bash
          GOOGLE_APPLICATION_CREDENTIALS=`pwd`/firebase_service_account.json firebase appdistribution:distribute `pwd`/app-release.apk --app $FIREBASE_APP_ID_ANDROID --testers "yorifuji@gmail.com"

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f ./firebase_service_account.json
