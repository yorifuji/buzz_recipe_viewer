name: 04 Deliver for production

run-name: Deliver for production ${{ (vars.RUNS_ON_SELF_HOSTED == null && '(on GitHub-hosted)') || '(on self-hosted)' }}

on:
  workflow_dispatch:
    inputs:
      upload:
        description: 'Upload'
        type: boolean
        default: true
  workflow_call:
    inputs:
      upload:
        description: 'Upload'
        type: boolean
        default: true

permissions:
  contents: read

env:
  DEVELOPER_DIR: ${{ (vars.DEVELOPER_DIR == null && '/Applications/Xcode_15.0.1.app') || vars.DEVELOPER_DIR }}
  GOOGLE_PLAY_TRACK: ${{ (vars.GOOGLE_PLAY_TRACK == '' && 'internal') || vars.GOOGLE_PLAY_TRACK }}
  GOOGLE_PLAY_STATUS: ${{ (vars.GOOGLE_PLAY_STATUS == '' && 'draft') || vars.GOOGLE_PLAY_STATUS }}

jobs:
  android:
    runs-on: ${{ (vars.RUNS_ON_SELF_HOSTED == null && 'ubuntu-latest') || 'self-hosted' }}
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - uses: actions/setup-java@6a0805fcefea3d4657a47ac4c165951e33482018 # v4.2.2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run pre-process script
        shell: bash
        env:
          PREPROCESS_SCRIPT_BASE64: ${{ secrets.PREPROCESS_SCRIPT_BASE64 }}
        run: |
          if [ -n "$PREPROCESS_SCRIPT_BASE64" ]; then
            echo "$PREPROCESS_SCRIPT_BASE64" | base64 --decode > ${{ runner.temp }}/pre-process.sh && bash ${{ runner.temp }}/pre-process.sh
          fi

      - uses: subosito/flutter-action@44ac965b96f18d999802d4b807e3256d5a3f9fa1 # v2.16.0
        with:
          flutter-version: ${{ (vars.FLUTTER_VERSION != null && vars.FLUTTER_VERSION) || '' }}
          channel: stable
          cache: ${{ (vars.RUNS_ON_SELF_HOSTED == null && true) || false }}

      - run: flutter pub get

      - name: flutterfire configure
        env:
          FIREBASE_ADMIN_SERVICE_ACCOUNT_JSON_BASE64: ${{ secrets.FIREBASE_ADMIN_SERVICE_ACCOUNT_JSON_BASE64_PROD }}
        run: |
          which firebase || curl -sL https://firebase.tools | bash
          dart pub global activate flutterfire_cli 1.0.1-dev.4
          echo -n "$FIREBASE_ADMIN_SERVICE_ACCOUNT_JSON_BASE64" | base64 --decode > ${{ runner.temp }}/firebase_admin_service_account.json
          GOOGLE_APPLICATION_CREDENTIALS=${{ runner.temp }}/firebase_admin_service_account.json make firebase-configure-prod

      - name: Extract key.properties file
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          ANDROID_KEY_PROPERTIES_BASE64: ${{ secrets.ANDROID_KEY_PROPERTIES_BASE64 }}
        run: |
          echo "$ANDROID_KEYSTORE_BASE64" | base64 --decode > ${{ runner.temp }}/release.jks
          echo "$ANDROID_KEY_PROPERTIES_BASE64" | base64 --decode > android/key.properties
          echo storeFile=${{ runner.temp }}/release.jks >> android/key.properties

      - name: Build app bundle
        run: |
          flutter build appbundle --dart-define=FLAVOR=prod

      - name: Get Job Output info
        id: info
        run: |
          echo "release-name=$(flutter pub run cider version | sed -E 's/([0-9.]+)\+([0-9]+)/\2(\1)/g')" >> $GITHUB_OUTPUT
          echo "package-name=$(sed -nE 's/.*package="(.*)".*/\1/p' android/app/src/main/AndroidManifest.xml)" >> $GITHUB_OUTPUT

      - name: Extract Google Play Service Account file
        if: ${{ inputs.upload }}
        env:
          GOOGLE_PLAY_SERVICE_ACCOUNT_JSON_BASE64: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON_BASE64 }}
        run: |
          echo -n "$GOOGLE_PLAY_SERVICE_ACCOUNT_JSON_BASE64" | base64 --decode > ${{ runner.temp }}/google_play_service_account.json

      - name: Upload to Google Play
        if: ${{ inputs.upload }}
        uses: r0adkll/upload-google-play@935ef9c68bb393a8e6116b1575626a7f5be3a7fb
        with:
          serviceAccountJson: ${{ runner.temp }}/google_play_service_account.json
          releaseFiles: build/app/outputs/bundle/release/app-release.aab
          packageName: ${{ steps.info.outputs.package-name }}
          releaseName: ${{ steps.info.outputs.release-name }}
          track: ${{ env.GOOGLE_PLAY_TRACK }}
          status: ${{ env.GOOGLE_PLAY_STATUS }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f ./android/key.properties

  ios:
    runs-on: ${{ (vars.RUNS_ON_SELF_HOSTED == null && 'macos-14') || 'self-hosted' }}
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Run pre-process script
        shell: bash
        env:
          PREPROCESS_SCRIPT_BASE64: ${{ secrets.PREPROCESS_SCRIPT_BASE64 }}
        run: |
          if [ -n "$PREPROCESS_SCRIPT_BASE64" ]; then
            echo "$PREPROCESS_SCRIPT_BASE64" | base64 --decode > ${{ runner.temp }}/pre-process.sh && bash ${{ runner.temp }}/pre-process.sh
          fi

      - uses: subosito/flutter-action@44ac965b96f18d999802d4b807e3256d5a3f9fa1 # v2.16.0
        with:
          flutter-version: ${{ (vars.FLUTTER_VERSION != null && vars.FLUTTER_VERSION) || '' }}
          channel: stable
          cache: ${{ (vars.RUNS_ON_SELF_HOSTED == null && true) || false }}
          architecture: arm64

      - run: flutter pub get

      - name: flutterfire configure
        env:
          FIREBASE_ADMIN_SERVICE_ACCOUNT_JSON_BASE64: ${{ secrets.FIREBASE_ADMIN_SERVICE_ACCOUNT_JSON_BASE64_PROD }}
        run: |
          which firebase || curl -sL https://firebase.tools | bash
          dart pub global activate flutterfire_cli 1.0.1-dev.4
          echo -n "$FIREBASE_ADMIN_SERVICE_ACCOUNT_JSON_BASE64" | base64 --decode > ${{ runner.temp }}/firebase_admin_service_account.json
          GOOGLE_APPLICATION_CREDENTIALS=${{ runner.temp }}/firebase_admin_service_account.json make firebase-configure-prod

      - name: Extract App Store Connect API Private Key
        env:
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_AUTHKEY_P8_BASE64: ${{ secrets.APPLE_API_AUTHKEY_P8_BASE64 }}
        run: |
          mkdir -p ./private_keys
          echo -n "$APPLE_API_AUTHKEY_P8_BASE64" | base64 --decode > ./private_keys/AuthKey_$APPLE_API_KEY_ID.p8

      - name: Create ExportOptions.plist and Runner.entitlements
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          cat << EOS > ./ios/ExportOptions.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
            <dict>
              <key>compileBitcode</key>
              <false/>
              <key>manageAppVersionAndBuildNumber</key>
              <false/>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>${APPLE_TEAM_ID}</string>
            </dict>
          </plist>
          EOS
          cat << EOS > ./ios/Runner/Runner.entitlements
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>aps-environment</key>
            <string>production</string>
          </dict>
          </plist>
          EOS

      - name: Build
        env:
          APPLE_API_ISSUER_ID: ${{ secrets.APPLE_API_ISSUER_ID }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
        run: |
          flutter build ios --release --no-codesign --dart-define=FLAVOR=prod
          xcodebuild archive \
            -workspace ./ios/Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -archivePath ./build/ios/Runner.xcarchive | xcbeautify
            -allowProvisioningUpdates \
            -authenticationKeyIssuerID $APPLE_API_ISSUER_ID \
            -authenticationKeyID $APPLE_API_KEY_ID \
            -authenticationKeyPath `pwd`/private_keys/AuthKey_$APPLE_API_KEY_ID.p8
          xcodebuild -exportArchive \
            -archivePath ./build/ios/Runner.xcarchive \
            -exportPath ./build/ios/ipa \
            -exportOptionsPlist ./ios/ExportOptions.plist \
            -allowProvisioningUpdates \
            -authenticationKeyIssuerID $APPLE_API_ISSUER_ID \
            -authenticationKeyID $APPLE_API_KEY_ID \
            -authenticationKeyPath `pwd`/private_keys/AuthKey_$APPLE_API_KEY_ID.p8 | xcbeautify

      - run: |
          pushd build/ios/ipa/
          zip -r buzz_recipe_viewer.zip buzz_recipe_viewer.ipa
          popd
          mv build/ios/ipa/buzz_recipe_viewer.zip ./

      - uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4.3.6
        with:
          path: buzz_recipe_viewer.zip
          name: buzz_recipe_viewer
          overwrite: true

      - name: Find ipa file path
        id: info
        run: |
          echo "app-path=$(find build/ios/ipa -type f -name '*.ipa')" >> $GITHUB_OUTPUT

      - name: Upload to App Store Connect
        if: ${{ inputs.upload }}
        env:
          APPLE_API_ISSUER_ID: ${{ secrets.APPLE_API_ISSUER_ID }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
        run: xcrun altool --upload-app --type ios -f "${{ steps.info.outputs.app-path }}" --apiKey $APPLE_API_KEY_ID --apiIssuer $APPLE_API_ISSUER_ID

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -rf ./private_keys

  macos:
    runs-on: ${{ (vars.RUNS_ON_SELF_HOSTED == null && 'macos-14') || 'self-hosted' }}
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Run pre-process script
        shell: bash
        env:
          PREPROCESS_SCRIPT_BASE64: ${{ secrets.PREPROCESS_SCRIPT_BASE64 }}
        run: |
          if [ -n "$PREPROCESS_SCRIPT_BASE64" ]; then
            echo "$PREPROCESS_SCRIPT_BASE64" | base64 --decode > ${{ runner.temp }}/pre-process.sh && bash ${{ runner.temp }}/pre-process.sh
          fi

      - uses: subosito/flutter-action@44ac965b96f18d999802d4b807e3256d5a3f9fa1 # v2.16.0
        with:
          flutter-version: ${{ (vars.FLUTTER_VERSION != null && vars.FLUTTER_VERSION) || '' }}
          channel: stable
          cache: ${{ (vars.RUNS_ON_SELF_HOSTED == null && true) || false }}
          architecture: arm64

      - run: flutter pub get

      - run: flutter build macos --dart-define=FLAVOR=prod

  action-timeline:
    needs: [android, ios, macos]
    if: ${{ !cancelled() && github.event.workflow == '.github/workflows/deliver-prod.yml' }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: Kesin11/actions-timeline@da70beff098ff89b15d279e8bf2f60519a8dadd7 # v2.2.0
