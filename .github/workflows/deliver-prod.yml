name: 04 Deliver for production

run-name: Deliver for production ${{ (vars.RUNS_ON_SELF_HOSTED == null && '(on GitHub-hosted)') || '(on self-hosted)' }}

on:
  workflow_dispatch:
    inputs:
      upload:
        description: 'Upload'
        type: boolean
        default: true
  workflow_call:
    inputs:
      upload:
        description: 'Upload'
        type: boolean
        default: true

env:
  DEVELOPER_DIR: ${{ (vars.DEVELOPER_DIR == null && '/Applications/Xcode_16.2.app') || vars.DEVELOPER_DIR }}
  GOOGLE_PLAY_TRACK: ${{ (vars.GOOGLE_PLAY_TRACK == '' && 'internal') || vars.GOOGLE_PLAY_TRACK }}
  GOOGLE_PLAY_STATUS: ${{ (vars.GOOGLE_PLAY_STATUS == '' && 'draft') || vars.GOOGLE_PLAY_STATUS }}

defaults:
  run:
    shell: bash -euo pipefail {0}

jobs:
  android:
    runs-on: ${{ (vars.RUNS_ON_SELF_HOSTED == null && 'ubuntu-24.04') || 'self-hosted' }}
    environment: production
    timeout-minutes: 30
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - uses: actions/setup-java@3a4f6e1af504cf6a31855fa899c6aa5355ba6c12 # v4.7.0
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run pre-process script
        shell: bash
        env:
          PREPROCESS_SCRIPT_BASE64: ${{ secrets.PREPROCESS_SCRIPT_BASE64 }}
        run: |
          if [ -n "$PREPROCESS_SCRIPT_BASE64" ]; then
            echo "$PREPROCESS_SCRIPT_BASE64" | base64 --decode > ${{ runner.temp }}/pre-process.sh && bash ${{ runner.temp }}/pre-process.sh
          fi

      - uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            ./ios/Pods
            .symlinks
            ~/Library/Caches/CocoaPods
          key: cocoapods-cache-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('ios/Podfile.lock') }}

      - uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            /usr/local/lib/android/sdk/platforms/android-31
            /usr/local/lib/android/sdk/platforms/android-33
            /usr/local/lib/android/sdk/cmake/3.22.1
          key: android-sdk-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('**/build.gradle') }}

      - uses: subosito/flutter-action@f2c4f6686ca8e8d6e6d0f28410eeef506ed66aff # v2.18.0
        with:
          flutter-version: ${{ (vars.FLUTTER_VERSION != null && vars.FLUTTER_VERSION) || '' }}
          channel: stable
          cache: ${{ (vars.RUNS_ON_SELF_HOSTED == null && true) || false }}

      - run: flutter pub get

      - name: flutterfire configure
        env:
          FIREBASE_SERVICE_ACCOUNT_JSON_BASE64: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON_BASE64 }}
        run: |
          which firebase || curl -sL https://firebase.tools | analytics=false bash
          firebase --version
          which flutterfire || dart pub global activate flutterfire_cli
          flutterfire -v
          echo -n "$FIREBASE_SERVICE_ACCOUNT_JSON_BASE64" | base64 --decode > ${{ runner.temp }}/firebase_service_account.json
          GOOGLE_APPLICATION_CREDENTIALS=${{ runner.temp }}/firebase_service_account.json make flutterfire-configure-prod

      - name: Extract key.properties file
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          ANDROID_KEY_PROPERTIES_BASE64: ${{ secrets.ANDROID_KEY_PROPERTIES_BASE64 }}
        run: |
          echo "$ANDROID_KEYSTORE_BASE64" | base64 --decode > ${{ runner.temp }}/release.jks
          echo "$ANDROID_KEY_PROPERTIES_BASE64" | base64 --decode > android/key.properties
          echo storeFile=${{ runner.temp }}/release.jks >> android/key.properties

      - name: Build app bundle
        run: flutter build appbundle --dart-define=FLAVOR=prod

      - name: Get Job Output info
        id: info
        run: |
          echo "release-name=$(flutter pub run cider version | sed -E 's/([0-9.]+)\+([0-9]+)/\2(\1)/g')" >> $GITHUB_OUTPUT
          echo "package-name=$(sed -nE 's/.*package="(.*)".*/\1/p' android/app/src/main/AndroidManifest.xml)" >> $GITHUB_OUTPUT

      - name: Extract Google Play Service Account file
        if: ${{ inputs.upload }}
        env:
          GOOGLE_PLAY_SERVICE_ACCOUNT_JSON_BASE64: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON_BASE64 }}
        run: |
          echo -n "$GOOGLE_PLAY_SERVICE_ACCOUNT_JSON_BASE64" | base64 --decode > ${{ runner.temp }}/google_play_service_account.json

      - name: Upload to Google Play
        if: ${{ inputs.upload }}
        uses: r0adkll/upload-google-play@935ef9c68bb393a8e6116b1575626a7f5be3a7fb
        with:
          serviceAccountJson: ${{ runner.temp }}/google_play_service_account.json
          releaseFiles: build/app/outputs/bundle/release/app-release.aab
          packageName: ${{ steps.info.outputs.package-name }}
          releaseName: ${{ steps.info.outputs.release-name }}
          track: ${{ env.GOOGLE_PLAY_TRACK }}
          status: ${{ env.GOOGLE_PLAY_STATUS }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f ./android/key.properties

  ios:
    runs-on: ${{ (vars.RUNS_ON_SELF_HOSTED == null && 'macos-15') || 'self-hosted' }}
    environment: production
    timeout-minutes: 30
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Run pre-process script
        shell: bash
        env:
          PREPROCESS_SCRIPT_BASE64: ${{ secrets.PREPROCESS_SCRIPT_BASE64 }}
        run: |
          if [ -n "$PREPROCESS_SCRIPT_BASE64" ]; then
            echo "$PREPROCESS_SCRIPT_BASE64" | base64 --decode > ${{ runner.temp }}/pre-process.sh && bash ${{ runner.temp }}/pre-process.sh
          fi

      - uses: subosito/flutter-action@f2c4f6686ca8e8d6e6d0f28410eeef506ed66aff # v2.18.0
        id: flutter-action
        with:
          flutter-version: ${{ (vars.FLUTTER_VERSION != null && vars.FLUTTER_VERSION) || '' }}
          channel: stable
          cache: ${{ (vars.RUNS_ON_SELF_HOSTED == null && true) || false }}
          architecture: arm64

      - uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            ios/Pods
            build/ios/pod_inputs.fingerprint
          key: cocoapods-cache-${{ runner.os }}-${{ runner.arch }}-${{ steps.flutter-action.outputs.VERSION }}-${{ hashFiles('ios/Podfile.lock', 'ios/Runner.xcodeproj/project.pbxproj') }}

      - run: flutter pub get

      - name: Workaround for cocoapods cache
        run: |
          if [ -d ios/Pods ]; then cp ios/Podfile.lock ios/Pods/Manifest.lock; fi

      - name: flutterfire configure
        env:
          FIREBASE_SERVICE_ACCOUNT_JSON_BASE64: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON_BASE64 }}
        run: |
          which firebase || curl -sL https://firebase.tools | analytics=false bash
          firebase --version
          which flutterfire || dart pub global activate flutterfire_cli
          flutterfire -v
          echo -n "$FIREBASE_SERVICE_ACCOUNT_JSON_BASE64" | base64 --decode > ${{ runner.temp }}/firebase_service_account.json
          GOOGLE_APPLICATION_CREDENTIALS=${{ runner.temp }}/firebase_service_account.json make flutterfire-configure-prod

      - name: Import Apple Development Certificate(Required xcodebuild archive with entitlements)
        env:
          APPLE_DEVELOPMENT_CERTIFICATE_P12_BASE64: ${{ secrets.APPLE_DEVELOPMENT_CERTIFICATE_P12_BASE64 }}
          APPLE_DEVELOPMENT_CERTIFICATE_P12_PASSWORD: ${{ secrets.APPLE_DEVELOPMENT_CERTIFICATE_P12_PASSWORD }}
          APPLE_DEVELOPMENT_KEYCHAIN_PASSWORD: ${{ secrets.APPLE_DEVELOPMENT_KEYCHAIN_PASSWORD }}
        run: |
          CERTIFICATE_P12_PATH=${{ runner.temp }}/build_certificate.p12
          KEYCHAIN_PATH=${{ runner.temp }}/app-signing.keychain-db

          # extract certificate from secrets
          echo -n "$APPLE_DEVELOPMENT_CERTIFICATE_P12_BASE64" | base64 --decode --output $CERTIFICATE_P12_PATH

          # create temporary keychain
          security create-keychain -p "$APPLE_DEVELOPMENT_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$APPLE_DEVELOPMENT_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_P12_PATH -P "$APPLE_DEVELOPMENT_CERTIFICATE_P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Extract App Store Connect API Private Key
        env:
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_AUTHKEY_P8_BASE64: ${{ secrets.APPLE_API_AUTHKEY_P8_BASE64 }}
        run: |
          mkdir -p ./private_keys
          echo -n "$APPLE_API_AUTHKEY_P8_BASE64" | base64 --decode > ./private_keys/AuthKey_$APPLE_API_KEY_ID.p8

      - name: Create ExportOptions.plist and Runner.entitlements
        run: |
          cat << EOS > ./ios/ExportOptions.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>compileBitcode</key>
            <false/>
            <key>manageAppVersionAndBuildNumber</key>
            <false/>
            <key>method</key>
            <string>app-store-connect</string>
          </dict>
          </plist>
          EOS

      - name: xcodebuild archive and export ipa
        env:
          APPLE_API_ISSUER_ID: ${{ secrets.APPLE_API_ISSUER_ID }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
        run: |
          flutter build ios \
            --config-only \
            --no-codesign \
            --dart-define=FLAVOR=prod
          xcodebuild archive \
            -archivePath ./build/ios/Runner.xcarchive \
            -workspace ./ios/Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -allowProvisioningUpdates \
            -allowProvisioningDeviceRegistration \
            -authenticationKeyIssuerID $APPLE_API_ISSUER_ID \
            -authenticationKeyID $APPLE_API_KEY_ID \
            -authenticationKeyPath `pwd`/private_keys/AuthKey_$APPLE_API_KEY_ID.p8 | xcbeautify
          xcodebuild -exportArchive \
            -archivePath ./build/ios/Runner.xcarchive \
            -exportPath ./build/ios/ipa \
            -exportOptionsPlist ./ios/ExportOptions.plist \
            -allowProvisioningUpdates \
            -authenticationKeyIssuerID $APPLE_API_ISSUER_ID \
            -authenticationKeyID $APPLE_API_KEY_ID \
            -authenticationKeyPath `pwd`/private_keys/AuthKey_$APPLE_API_KEY_ID.p8 | xcbeautify

      - name: Find ipa file path
        id: info
        run: |
          echo "app-path=$(find build/ios/ipa -type f -name '*.ipa')" >> $GITHUB_OUTPUT

      - name: Upload to App Store Connect
        if: ${{ inputs.upload }}
        env:
          APPLE_API_ISSUER_ID: ${{ secrets.APPLE_API_ISSUER_ID }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
        run: xcrun altool --upload-app --type ios -f "${{ steps.info.outputs.app-path }}" --apiKey $APPLE_API_KEY_ID --apiIssuer $APPLE_API_ISSUER_ID

      - name: Clean up
        if: ${{ always() }}
        run: |
          security delete-keychain ${{ runner.temp }}/app-signing.keychain-db
          rm -rf ~/Library/MobileDevice/Provisioning\ Profiles
          rm -rf ./private_keys

  # macos:
  #   runs-on: ${{ (vars.RUNS_ON_SELF_HOSTED == null && 'macos-15') || 'self-hosted' }}
  #   environment: production
  #   timeout-minutes: 30
  #   steps:
  #     - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

  #     - name: Run pre-process script
  #       shell: bash
  #       env:
  #         PREPROCESS_SCRIPT_BASE64: ${{ secrets.PREPROCESS_SCRIPT_BASE64 }}
  #       run: |
  #         if [ -n "$PREPROCESS_SCRIPT_BASE64" ]; then
  #           echo "$PREPROCESS_SCRIPT_BASE64" | base64 --decode > ${{ runner.temp }}/pre-process.sh && bash ${{ runner.temp }}/pre-process.sh
  #         fi

  #     - uses: subosito/flutter-action@f2c4f6686ca8e8d6e6d0f28410eeef506ed66aff # v2.18.0
  #       with:
  #         flutter-version: ${{ (vars.FLUTTER_VERSION != null && vars.FLUTTER_VERSION) || '' }}
  #         channel: stable
  #         cache: ${{ (vars.RUNS_ON_SELF_HOSTED == null && true) || false }}
  #         architecture: arm64

  #     - run: flutter pub get

  #     - name: flutterfire configure
  #       env:
  #         FIREBASE_SERVICE_ACCOUNT_JSON_BASE64: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON_BASE64 }}
  #       run: |
  #         which firebase || curl -sL https://firebase.tools | analytics=false bash
  #         dart pub global activate flutterfire_cli && flutterfire -v
  #         echo -n "$FIREBASE_SERVICE_ACCOUNT_JSON_BASE64" | base64 --decode > ${{ runner.temp }}/firebase_service_account.json
  #         GOOGLE_APPLICATION_CREDENTIALS=${{ runner.temp }}/firebase_service_account.json make flutterfire-configure-prod

  #     - run: flutter build macos --dart-define=FLAVOR=prod

  #     - if: ${{ inputs.upload }}
  #       run: |
  #         pushd build/macos/Build/Products/Release
  #         zip -r buzz_recipe_viewer_macos_prod.zip buzz_recipe_viewer.app
  #         popd
  #         mv build/macos/Build/Products/Release/buzz_recipe_viewer_macos_prod.zip ./

  #     - uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
  #       if: ${{ inputs.upload }}
  #       with:
  #         path: buzz_recipe_viewer_macos_prod.zip
  #         name: buzz_recipe_viewer_macos_prod
  #         overwrite: true

  action-timeline:
    needs: [android, ios]
    if: ${{ !cancelled() && github.event.workflow == '.github/workflows/deliver-prod.yml' }}
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    permissions: {}
    steps:
      - uses: Kesin11/actions-timeline@427ee2cf860166e404d0d69b4f2b24012bb7af4f # v2.2.3
