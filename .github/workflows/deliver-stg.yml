name: 03 deliver for staging

run-name: Deliver for staging ${{ (vars.RUNS_ON_SELF_HOSTED == null && '(on GitHub hosted)') || '(on self-hosted)' }}

on:
  workflow_dispatch:
    inputs:
      upload:
        description: 'Upload'
        type: boolean
        default: true

permissions:
  contents: read

env:
  FLUTTER_VERSION: ${{ (vars.FLUTTER_VERSION == '' && 'stable') || vars.FLUTTER_VERSION }}

jobs:
  android:
    runs-on: ${{ (vars.RUNS_ON_SELF_HOSTED == null && 'ubuntu-latest') || 'self-hosted' }}
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3

      - name: Run pre-process script
        shell: bash
        env:
          PREPROCESS_SCRIPT_BASE64: ${{ secrets.PREPROCESS_SCRIPT_BASE64 }}
        run: |
          if [ -n "$PREPROCESS_SCRIPT_BASE64" ]; then
            echo $PREPROCESS_SCRIPT_BASE64 | base64 --decode > ${{ runner.temp }}/pre-process.sh && bash ${{ runner.temp }}/pre-process.sh
          fi

      - uses: ./.github/actions/setup-flutter
        with:
          version: ${{ env.FLUTTER_VERSION }}

      - name: Extract key.properties file
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          ANDROID_KEY_PROPERTIES_BASE64: ${{ secrets.ANDROID_KEY_PROPERTIES_BASE64 }}
        run: |
          echo $ANDROID_KEYSTORE_BASE64 | base64 --decode > ${{ runner.temp }}/release.jks
          echo $ANDROID_KEY_PROPERTIES_BASE64 | base64 --decode > android/key.properties
          echo storeFile=${{ runner.temp }}/release.jks >> android/key.properties

      - name: Build app bundle
        run: |
          flutter build apk --dart-define=FLAVOR=stg

      - name: Extract Firebase Service Account file
        if: ${{ inputs.upload }}
        env:
          FIREBASE_SERVICE_ACCOUNT_JSON_BASE64: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON_BASE64 }}
        run: |
          echo -n "$FIREBASE_SERVICE_ACCOUNT_JSON_BASE64" | base64 --decode > ${{ runner.temp }}/firebase_service_account.json

      - name: Upload to Firebase App Distribution
        if: ${{ inputs.upload }}
        env:
          FIREBASE_APP_ID_ANDROID: ${{ secrets.FIREBASE_APP_ID_ANDROID }}
        run: |
          which firebase || curl -sL https://firebase.tools | bash
          GOOGLE_APPLICATION_CREDENTIALS=${{ runner.temp }}/firebase_service_account.json firebase appdistribution:distribute build/app/outputs/flutter-apk/app-release.apk --app $FIREBASE_APP_ID_ANDROID --testers "yorifuji@gmail.com"

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f ./android/key.properties

  ios:
    runs-on: ${{ (vars.RUNS_ON_SELF_HOSTED == null && 'macos-latest') || 'self-hosted' }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3

      - name: Run pre-process script
        shell: bash
        env:
          PREPROCESS_SCRIPT_BASE64: ${{ secrets.PREPROCESS_SCRIPT_BASE64 }}
        run: |
          if [ -n "$PREPROCESS_SCRIPT_BASE64" ]; then
            echo $PREPROCESS_SCRIPT_BASE64 | base64 --decode > ${{ runner.temp }}/pre-process.sh && bash ${{ runner.temp }}/pre-process.sh
          fi

      - uses: ./.github/actions/setup-flutter
        with:
          version: ${{ env.FLUTTER_VERSION }}

      - name: Import Apple Development Certificate
        env:
          APPLE_KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
          APPLE_DEVELOPMENT_CERTIFICATE_P12_BASE64: ${{ secrets.APPLE_DEVELOPMENT_CERTIFICATE_P12_BASE64 }}
          APPLE_DEVELOPMENT_CERTIFICATE_P12_PASSWORD: ${{ secrets.APPLE_DEVELOPMENT_CERTIFICATE_P12_PASSWORD }}
        run: |
          DEVELOPMENT_CERTIFICATE_PATH=$RUNNER_TEMP/development_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate from secrets
          echo -n "$APPLE_DEVELOPMENT_CERTIFICATE_P12_BASE64" | base64 --decode > $DEVELOPMENT_CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$APPLE_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$APPLE_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $DEVELOPMENT_CERTIFICATE_PATH -P "$APPLE_DEVELOPMENT_CERTIFICATE_P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Extract App Store Connect API Private Key
        env:
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_AUTHKEY_P8_BASE64: ${{ secrets.APPLE_API_AUTHKEY_P8_BASE64 }}
        run: |
          echo -n "$APPLE_API_AUTHKEY_P8_BASE64" | base64 --decode > ${{ runner.temp }}/AuthKey_$APPLE_API_KEY_ID.p8

      - name: Build
        env:
          APPLE_API_ISSUER_ID: ${{ secrets.APPLE_API_ISSUER_ID }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
        run: |
          flutter build ios --release --no-codesign --dart-define=FLAVOR=stg
          xcodebuild archive -workspace ./ios/Runner.xcworkspace -scheme Runner -configuration Release -archivePath ./build/ios/Runner.xcarchive -allowProvisioningUpdates -authenticationKeyIssuerID $APPLE_API_ISSUER_ID -authenticationKeyID $APPLE_API_KEY_ID -authenticationKeyPath ${{ runner.temp }}/AuthKey_$APPLE_API_KEY_ID.p8
          cat << EOS > ./ios/ExportOptions.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>compileBitcode</key>
            <false/>
            <key>method</key>
            <string>ad-hoc</string>
          </dict>
          </plist>
          EOS
          xcodebuild -exportArchive -archivePath ./build/ios/Runner.xcarchive -exportPath ./build/ios/ipa -exportOptionsPlist ./ios/ExportOptions.plist -allowProvisioningUpdates -authenticationKeyIssuerID $APPLE_API_ISSUER_ID -authenticationKeyID $APPLE_API_KEY_ID -authenticationKeyPath ${{ runner.temp }}/AuthKey_$APPLE_API_KEY_ID.p8

      - name: Find ipa file path
        id: info
        run: |
          echo "app-path=$(pwd)/$(find build/ios/ipa -type f -name '*.ipa')" >> $GITHUB_OUTPUT

      - name: Extract Firebase Service Account file
        if: ${{ inputs.upload }}
        env:
          FIREBASE_SERVICE_ACCOUNT_JSON_BASE64: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON_BASE64 }}
        run: |
          echo -n "$FIREBASE_SERVICE_ACCOUNT_JSON_BASE64" | base64 --decode > ${{ runner.temp }}/firebase_service_account.json

      - name: Upload to Firebase App Distribution
        if: ${{ inputs.upload }}
        env:
          FIREBASE_APP_ID_IOS: ${{ secrets.FIREBASE_APP_ID_IOS }}
          APP_PATH: ${{ steps.info.outputs.app-path }}
        run: |
          which firebase || curl -sL https://firebase.tools | bash
          GOOGLE_APPLICATION_CREDENTIALS=${{ runner.temp }}/firebase_service_account.json firebase appdistribution:distribute $APP_PATH --app $FIREBASE_APP_ID_IOS --testers "yorifuji@gmail.com"

      - name: Clean up
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm -rf ~/Library/MobileDevice/Provisioning\ Profiles
