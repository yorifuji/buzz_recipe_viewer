name: reg-suit

run-name: reg-suit ${{ (vars.RUNS_ON_SELF_HOSTED == null && '(on GitHub-hosted)') || '(on self-hosted)' }}

on:
  pull_request:
    paths-ignore:
      - "**.md"
  workflow_dispatch:
  workflow_call:

permissions:
  contents: read
  issues: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  create-image-cache:
    name: Create image cache
    runs-on: ${{ (vars.RUNS_ON_SELF_HOSTED == null && 'ubuntu-latest') || 'self-hosted' }}
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}

      - name: sha of base branch
        id: base
        run: |
          echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: restore reg-suit cache
        id: cache
        uses: actions/cache@v3
        with:
          key: reg-suit-cache-${{ steps.base.outputs.sha }}
          path: .reg/

      - uses: actions/setup-node@v3
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          node-version: 18

      - name: restore yarn cache
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        with:
          key: reg-suit-cache-yarn-${{ hashFiles('**/yarn.lock') }}
          path: .yarn/cache/

      - if: steps.cache.outputs.cache-hit != 'true'
        run: yarn install --immutable

      - uses: subosito/flutter-action@v2
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          flutter-version: ${{ (vars.FLUTTER_VERSION != null && vars.FLUTTER_VERSION) || '' }}
          channel: stable
          cache: ${{ (vars.RUNS_ON_SELF_HOSTED == null && true) || false }}

      - if: steps.cache.outputs.cache-hit != 'true'
        run: flutter pub get

      - name: Run pre-process script
        if: steps.cache.outputs.cache-hit != 'true'
        env:
          PREPROCESS_SCRIPT_BASE64: ${{ secrets.PREPROCESS_SCRIPT_BASE64 }}
        run: |
          if [ -n "$PREPROCESS_SCRIPT_BASE64" ]; then
            echo $PREPROCESS_SCRIPT_BASE64 | base64 --decode > ${{ runner.temp }}/pre-process.sh && bash ${{ runner.temp }}/pre-process.sh
          fi

      - name: Create golden images
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          flutter test --update-goldens --tags=golden
          mkdir -p .reg/
          mv test/golden_test/goldens .reg/expected

      # - name: Upload .reg/ to articaft(for test)
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: reg-suit-cache-result
      #     path: .reg/

  compare-image:
    name: Compare image
    needs: create-image-cache
    runs-on: ${{ (vars.RUNS_ON_SELF_HOSTED == null && 'ubuntu-latest') || 'self-hosted' }}
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: sha of base branch
        id: base
        run: echo "sha=$(git rev-parse origin/$GITHUB_BASE_REF)" >> $GITHUB_OUTPUT

      - name: restore reg-suit cache
        uses: actions/cache/restore@v3
        with:
          key: reg-suit-cache-${{ steps.base.outputs.sha }}
          path: .reg/

      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: restore yarn cache
        uses: actions/cache@v3
        with:
          key: reg-suit-cache-yarn-${{ hashFiles('**/yarn.lock') }}
          path: .yarn/cache/

      - run: yarn install --immutable

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ (vars.FLUTTER_VERSION != null && vars.FLUTTER_VERSION) || '' }}
          channel: stable
          cache: ${{ (vars.RUNS_ON_SELF_HOSTED == null && true) || false }}

      - run: flutter pub get

      - name: Run pre-process script
        env:
          PREPROCESS_SCRIPT_BASE64: ${{ secrets.PREPROCESS_SCRIPT_BASE64 }}
        run: |
          if [ -n "$PREPROCESS_SCRIPT_BASE64" ]; then
            echo $PREPROCESS_SCRIPT_BASE64 | base64 --decode > ${{ runner.temp }}/pre-process.sh && bash ${{ runner.temp }}/pre-process.sh
          fi

      - name: Create golden images
        run: flutter test --update-goldens --tags=golden

      - name: Compare by reg-suit
        run: npx reg-suit compare 2>&1 | sed 's/\x1b\[[0-9;]*[a-zA-Z]//g' | tee reg-suit-compare.log

      - name: Upload .reg/ to articaft
        uses: actions/upload-artifact@v3
        with:
          name: reg-suit-compare-result
          path: .reg/

      - name: Generate Comment
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');

            const parseLogFile = (logFilePath) => {
              const logData = fs.readFileSync(logFilePath, 'utf-8');
              const lines = logData.split('\n');
              const stats = {
                changed: 0,
                newItems: 0,
                passing: 0
              };
              for (const line of lines) {
                if (line.includes('Changed items')) {
                    stats.changed = parseInt(line.split(': ')[1], 10);
                } else if (line.includes('New items')) {
                    stats.newItems = parseInt(line.split(': ')[1], 10);
                } else if (line.includes('Passed items')) {
                    stats.passing = parseInt(line.split(': ')[1], 10);
                }
              }
              return stats;
            };

            const parseLogFileToSnipet = (logFilePath) => {
              const logData = fs.readFileSync(logFilePath, 'utf-8');
              return "log\n\n```\n" + logData + "\n```\n\n";
            };

            const generateMarkdown = (stats, icon, owner, repository, runId) => {
              return `
              ### ${icon} reg-suit has checked for visual changes

              | ðŸ”´ Changed | ðŸŸ¡  New | ðŸ”µ Passing |
              |----------|------|----------|
              | ${stats.changed}      | ${stats.newItems}   | ${stats.passing}      |

              You can check details from Artifact [here](https://github.com/${owner}/${repository}/actions/runs/${runId})

              `;
            };

            const stats = parseLogFile('./reg-suit-compare.log');
            const log = parseLogFileToSnipet('./reg-suit-compare.log');
            const icon = stats.changed != 0 ? 'ðŸ”„' : stats.newItems != 0 ? 'ðŸ†•' : 'âœ…';
            const markdown = generateMarkdown(stats, icon, context.repo.owner, context.repo.repo, context.runId);
            fs.writeFileSync('./reg-suit-compare.md', markdown + log);

            await core.summary
              .addRaw(`### ${icon} reg-suit has checked for visual changes\n`)
              .addTable([
                ["ðŸ”´ Changed", "ðŸŸ¡ New", "ðŸ”µ Passing"],
                [String(stats.changed), String(stats.newItems), String(stats.passing)]
              ])
              .addRaw("\n")
              .addRaw(log)
              .write()

      - env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr comment ${{ github.event.number }} --edit-last -F ./reg-suit-compare.md || gh pr comment ${{ github.event.number }} -F ./reg-suit-compare.md
