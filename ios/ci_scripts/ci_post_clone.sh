#!/bin/zsh

# Fail this script if any subcommand fails.
set -e

# Check required environment variables
[ -z "$DOT_ENV" ] && echo "Error: DOT_ENV is not set" && exit 1
[ -z "$FIREBASE_ADMIN_SERVICE_ACCOUNT_JSON_BASE64" ] && echo "Error: FIREBASE_ADMIN_SERVICE_ACCOUNT_JSON_BASE64 is not set" && exit 1

# The default execution directory of this script is the ci_scripts directory.
cd $CI_PRIMARY_REPOSITORY_PATH # change working directory to the root of your cloned repo.

# Install jq if not available
which jq || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq

# Add comment to the PR if available
if [ -n "$CI_PULL_REQUEST_NUMBER" ] && [ -n "$GITHUB_TOKEN" ] && [ -n "$CI_PULL_REQUEST_TARGET_REPO" ]; then
  echo "Adding build started comment to PR #$CI_PULL_REQUEST_NUMBER..."
  
  # Get workflow URL from environment variables
  WORKFLOW_URL="$CI_WORKFLOW_URL"
  [ -z "$WORKFLOW_URL" ] && WORKFLOW_URL="https://developer.apple.com/xcode-cloud/"
  
  # Create comment with build information
  COMMENT="## ðŸš€ Build Started\n\nXcode Cloud build has been initiated.\n\n**Build Details:**\n- Workflow: [View in Xcode Cloud]($WORKFLOW_URL)\n- Build Number: \`$CI_BUILD_NUMBER\`\n- Started at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')\n\nThis comment was automatically generated by the CI system."
  
  # Properly escape the comment for JSON
  COMMENT_ESCAPED=$(echo "$COMMENT" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g')
  
  # Post comment to PR
  echo "Posting comment to GitHub API..."
  RESPONSE=$(curl -s -w "%{http_code}" -X POST \
    -H "Accept: application/vnd.github+json" \
    -H "Authorization: Bearer $GITHUB_TOKEN" \
    -H "X-GitHub-Api-Version: 2022-11-28" \
    "https://api.github.com/repos/$CI_PULL_REQUEST_TARGET_REPO/issues/$CI_PULL_REQUEST_NUMBER/comments" \
    -d "{\"body\":\"$COMMENT_ESCAPED\"}")
  
  HTTP_STATUS=${RESPONSE: -3}
  RESPONSE_BODY=${RESPONSE:0:${#RESPONSE}-3}
  
  if [[ "$HTTP_STATUS" -ge 200 ]] && [[ "$HTTP_STATUS" -lt 300 ]]; then
    echo "Build started comment added to PR #$CI_PULL_REQUEST_NUMBER (HTTP Status: $HTTP_STATUS)"
  else
    echo "Failed to add comment to PR #$CI_PULL_REQUEST_NUMBER (HTTP Status: $HTTP_STATUS)"
    echo "Response: $RESPONSE_BODY"
    # Don't fail the build because of a comment failure
  fi
else
  # Log why we're not adding a comment
  if [ -z "$CI_PULL_REQUEST_NUMBER" ]; then
    echo "Skipping PR comment: This is not a pull request build (CI_PULL_REQUEST_NUMBER is not set)"
  elif [ -z "$GITHUB_TOKEN" ]; then
    echo "Skipping PR comment: GITHUB_TOKEN is not set"
  elif [ -z "$CI_PULL_REQUEST_TARGET_REPO" ]; then
    echo "Skipping PR comment: CI_PULL_REQUEST_TARGET_REPO is not set"
  else
    echo "Skipping PR comment: Unknown reason"
  fi
fi

# Get Flutter version from .fvmrc
FLUTTER_VERSION=$(jq -r '.flutter' .fvmrc)
[ -z "$FLUTTER_VERSION" ] && echo "Error: Could not get Flutter version from .fvmrc" && exit 1
echo "Using Flutter version: $FLUTTER_VERSION from .fvmrc"

# Determine architecture and set appropriate URL suffix
ARCH=$(uname -m)
case "$ARCH" in
    "arm64"|"aarch64")
        URL_SUFFIX="_arm64"
        ;;
    "x86_64")
        URL_SUFFIX=""
        ;;
    *)
        echo "Error: Unsupported architecture: $ARCH"
        exit 1
        ;;
esac

# Download and install Flutter
FLUTTER_URL="https://storage.googleapis.com/flutter_infra_release/releases/stable/macos/flutter_macos${URL_SUFFIX}_${FLUTTER_VERSION}-stable.zip"
echo "Downloading Flutter from: $FLUTTER_URL"

# Remove existing Flutter installation
rm -rf $HOME/flutter

# Download Flutter
if ! curl -L $FLUTTER_URL -o $HOME/flutter.zip; then
    echo "Error: Failed to download Flutter"
    exit 1
fi

# Extract Flutter
if ! unzip -q $HOME/flutter.zip -d $HOME; then
    echo "Error: Failed to extract Flutter"
    rm -f $HOME/flutter.zip
    exit 1
fi

# Clean up
rm -f $HOME/flutter.zip

# Verify Flutter installation
if ! $HOME/flutter/bin/flutter --version; then
    echo "Error: Flutter installation verification failed"
    exit 1
fi

export PATH="$HOME/flutter/bin:$PATH"
export PATH="$HOME/.pub-cache/bin:$PATH"

# Install Flutter artifacts for iOS (--ios), or macOS (--macos) platforms.
flutter precache --ios

# Install firebase tools
which firebase || curl -sL https://firebase.tools | analytics=false bash
firebase --version

# Install flutterfire
which flutterfire || dart pub global activate flutterfire_cli
flutterfire -v

# Install xcodeproj for flutterfire configure
export GEM_HOME="$HOME/.gem"
export PATH="$PATH:$GEM_HOME/bin"
gem install xcodeproj

# Install CocoaPods using Homebrew if not already installed
if ! command -v pod &> /dev/null; then
    echo "Installing CocoaPods..."
    HOMEBREW_NO_AUTO_UPDATE=1 brew install cocoapods
else
    echo "CocoaPods is already installed"
fi

# Show CocoaPods version
echo "CocoaPods version: $(pod --version)"

# .env
echo $DOT_ENV | base64 --decode > .env

# Run flutterfire configure
echo -n $FIREBASE_ADMIN_SERVICE_ACCOUNT_JSON_BASE64 | base64 --decode > firebase_admin_service_account.json
flutterfire configure \
   --overwrite-firebase-options \
   --project=buzzrecipeviewer \
   --platforms=ios \
   --ios-bundle-id=dev.yorifuji.buzzRecipeViewer \
   --service-account=firebase_admin_service_account.json

# Install Flutter dependencies first
flutter pub get

# Then install CocoaPods dependencies
(cd ios && pod install) # run `pod install` in the `ios` directory

# Run flutter build for config only with flavor prod
flutter build ios --config-only --dart-define=FLAVOR=prod
